name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run black (code formatting check)
      run: |
        black --check src/ tests/
      continue-on-error: false
    
    - name: Run isort (import sorting check)
      run: |
        isort --check-only src/ tests/
      continue-on-error: false
    
    - name: Run flake8 (linting)
      run: |
        flake8 src/ tests/
      continue-on-error: false
    
    - name: Create data directories
      run: |
        mkdir -p data/raw data/processed models
    
    - name: Download dataset (mock for CI)
      run: |
        # In real CI, you would download or use a sample dataset
        # For now, create a minimal mock dataset
        python -c "
        import pandas as pd
        import numpy as np
        np.random.seed(42)
        n = 1000
        df = pd.DataFrame({
            'ID': range(1, n+1),
            'LIMIT_BAL': np.random.randint(10000, 100000, n),
            'SEX': np.random.choice([1, 2], n),
            'EDUCATION': np.random.choice([1, 2, 3, 4], n),
            'MARRIAGE': np.random.choice([1, 2, 3], n),
            'AGE': np.random.randint(21, 70, n),
            'PAY_0': np.random.randint(-2, 3, n),
            'PAY_2': np.random.randint(-2, 3, n),
            'PAY_3': np.random.randint(-2, 3, n),
            'PAY_4': np.random.randint(-2, 3, n),
            'PAY_5': np.random.randint(-2, 3, n),
            'PAY_6': np.random.randint(-2, 3, n),
            'BILL_AMT1': np.random.randint(0, 50000, n),
            'BILL_AMT2': np.random.randint(0, 50000, n),
            'BILL_AMT3': np.random.randint(0, 50000, n),
            'BILL_AMT4': np.random.randint(0, 50000, n),
            'BILL_AMT5': np.random.randint(0, 50000, n),
            'BILL_AMT6': np.random.randint(0, 50000, n),
            'PAY_AMT1': np.random.randint(0, 10000, n),
            'PAY_AMT2': np.random.randint(0, 10000, n),
            'PAY_AMT3': np.random.randint(0, 10000, n),
            'PAY_AMT4': np.random.randint(0, 10000, n),
            'PAY_AMT5': np.random.randint(0, 10000, n),
            'PAY_AMT6': np.random.randint(0, 10000, n),
            'default.payment.next.month': np.random.choice([0, 1], n, p=[0.78, 0.22])
        })
        df.to_csv('data/raw/UCI_Credit_Card.csv', index=False)
        "
    
    - name: Run data preparation
      run: |
        python src/data/make_dataset.py
    
    - name: Run data validation (Great Expectations)
      run: |
        python src/data/validation.py
      continue-on-error: false
    
    - name: Run feature engineering
      run: |
        python src/features/build_features.py
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --tb=short
      continue-on-error: false
    
    - name: Generate coverage report
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=term
    
    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.xml
  
  build-docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t credit-scoring-api:latest .
    
    - name: Test Docker container
      run: |
        docker run -d -p 8000:8000 --name test-api credit-scoring-api:latest
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-api
        docker rm test-api
    
    - name: Save Docker image
      run: |
        docker save credit-scoring-api:latest | gzip > credit-scoring-api.tar.gz
    
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: credit-scoring-api.tar.gz
        retention-days: 7